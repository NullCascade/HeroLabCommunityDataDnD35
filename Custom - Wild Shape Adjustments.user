<?xml version="1.0" encoding="ISO-8859-1"?>
<document signature="Hero Lab Data">
  <fileinfo>
    <info_author>Added by Tinalles.

public@atuan.com</info_author>
    <info_history>4 June 2014 - Initial revision.</info_history>
    <info_todo>A check to throw an error if the druid assumes an illegal form would be a nice bit of polish.</info_todo>
    </fileinfo>
  <thing id="pWSPorpois" name="Wild shape: Porpoise" description="Porpoise\nAquatic subtype\n+2 natural AC\nSTR 11\nDEX 17\nCON 13\nSlam attack\nSwim 80 feet" compset="InPlay" summary="Assume the shape of a dolphin.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="2d4_6"/>
      <autotag group="Helper" tag="NatPrimary"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="80"/>
      </bootstrap>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)


      ~ Add to size - must come after race and template size set
   ~   herofield[tSize].value += field[pAdjust].value
~if(hero.tagis[Size.Small]) then
~herofield[tSize].value += 1
~endif

      ~ Decrease the size of all our equipment by 1 (apart from unarmed
      ~ strike, which changes automatically)
      ~foreach pick in hero from MyGear where "!wCategory.Unarmed"
        ~eachpick.field[gSizeMod].value += field[pAdjust].value
        ~nexteach

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 11
hero.child[aSTR].field[aModBonus].value = 0

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSDog" name="Wild shape: Dog" description="Dog\n{b}STR{/b} 13\n{b}DEX{/b} 17\n{b}CON{/b} 15\n{b}Natural AC{/b} 1\n{b}Size{/b} Small\n{b}Movement{/b} 40\n{b}Attacks{/b} bite 1d4\n" compset="InPlay" summary="Assume the shape of a dog.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 13
hero.child[aSTR].field[aModBonus].value = 1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSAElemH" name="Wild shape: Air Elemental, Huge" description="Air Elemental, Huge\n{b}STR{/b} 18\n{b}DEX{/b} 29\n{b}CON{/b} 18\n{b}Natural AC{/b} 4\n{b}Size{/b} huge\n{b}Movement{/b} fly 100 perfect\n{b}Attacks{/b} slam 2d8\n{b}Other{/b} air mastery, whirlwind\n" compset="InPlay" summary="Assume the shape of a huge air elemental.">
    <usesource source="WSAdjust" parent="UserParent" name="Wild Shape Adjustments"/>
    <bootstrap thing="xAirWhirW2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="SizeMinus1"/>
      <autotag group="User" tag="2d8_305"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Perfect"/>
      <autotag group="Value" tag="100"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Value" tag="2"/>
      <autotag group="wMain" tag="2d8_305"/>
      </bootstrap>
    <bootstrap thing="xAirMstry2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Reduce land speed to 0 - air elementals only fly
hero.child[Speed].field[tSpeed].value = 0

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 18
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 18
hero.child[aSTR].field[aModBonus].value = 4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 29
hero.child[aDEX].field[aModBonus].value = 9]]></eval>
    </thing>
  <thing id="pWSBaboon" name="Wild shape: Baboon" description="Baboon\n{b}STR{/b} 15\n{b}DEX{/b} 14\n{b}CON{/b} 12\n{b}Natural AC{/b} 1\n{b}Size{/b} medium\n{b}Movement{/b} 40, climb 30\n{b}Attacks{/b} bite 1d6\n" compset="InPlay" summary="Assume the shape of a baboon.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 12
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 15
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 14
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSBadger" name="Wild shape: Badger" description="Badger\n{b}STR{/b} 8\n{b}DEX{/b} 17\n{b}CON{/b} 15\n{b}Natural AC{/b} 1\n{b}Size{/b} small\n{b}Movement{/b} 30, burrow 10\n{b}Attacks{/b} bite 1d3, 2xclaw 1d2\n{b}Other{/b} rage\n" compset="InPlay" summary="Assume the shape of a badger.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d2_2"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      </bootstrap>
    <bootstrap thing="xWolvRage">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xBurrow2">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="10"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 8
hero.child[aSTR].field[aModBonus].value = -1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSBlackB" name="Wild shape: Bear, Black" description="Bear, Black\n{b}STR{/b} 19\n{b}DEX{/b} 13\n{b}CON{/b} 15\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 40\n{b}Attacks{/b} bite 1d6, 2xclaw 1d4\n" compset="InPlay" summary="Assume the shape of a black bear.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 19
hero.child[aSTR].field[aModBonus].value = 4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSBoar" name="Wild shape: Boar" description="Boar\n{b}STR{/b} 15\n{b}DEX{/b} 10\n{b}CON{/b} 17\n{b}Natural AC{/b} 6\n{b}Size{/b} medium\n{b}Movement{/b} 40\n{b}Attacks{/b} gore 1d8\n{b}Other{/b} Ferocity\n" compset="InPlay" summary="Assume the shape of a boar.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBoarFeroc">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wGore">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 15
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSCheetah" name="Wild shape: Cheetah" description="Cheetah\n{b}STR{/b} 16\n{b}DEX{/b} 19\n{b}CON{/b} 15\n{b}Natural AC{/b} 1\n{b}Size{/b} medium\n{b}Movement{/b} 50\n{b}Attacks{/b} bite 1d6, 2xclaw 1d2\n{b}Other{/b} Trip\n" compset="InPlay" summary="Assume the shape of a cheetah.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="xTrip">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      <autotag group="User" tag="ScClaw"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d2_2"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 16
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 19
hero.child[aDEX].field[aModBonus].value = 4]]></eval>
    </thing>
  <thing id="pWSCroc" name="Wild shape: Crocodile" description="Crocodile\n{b}STR{/b} 19\n{b}DEX{/b} 12\n{b}CON{/b} 17\n{b}Natural AC{/b} 4\n{b}Size{/b} medium\n{b}Movement{/b} 20, swim 30\n{b}Attacks{/b} bite 1d8, tail slap 1d12\n{b}Other{/b} Improved Grab\n" compset="InPlay" summary="Assume the shape of a crocodile.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d12_404"/>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      <assignval field="livename" value="tail slap"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 19
hero.child[aSTR].field[aModBonus].value = 4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 12
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSRidDog" name="Wild shape: Dog, Riding" description="Dog, Riding\n{b}STR{/b} 15\n{b}DEX{/b} 15\n{b}CON{/b} 15\n{b}Natural AC{/b} 4\n{b}Size{/b} medium\n{b}Movement{/b} 40\n{b}Attacks{/b} bite 1d6\n" compset="InPlay" summary="Assume the shape of a riding dog.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 15
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSDonkey" name="Wild shape: Donkey" description="Donkey\n{b}STR{/b} 10\n{b}DEX{/b} 13\n{b}CON{/b} 12\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 30\n{b}Attacks{/b} bite 1d2\n" compset="InPlay" summary="Assume the shape of a donkey.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d2_2"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 12
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 10
hero.child[aSTR].field[aModBonus].value = 0

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSEagle" name="Wild shape: Eagle" description="Eagle\n{b}STR{/b} 10\n{b}DEX{/b} 15\n{b}CON{/b} 12\n{b}Natural AC{/b} 1\n{b}Size{/b} small\n{b}Movement{/b} 10, fly 80 average\n{b}Attacks{/b} talons +3 melee (1d4)\n" compset="InPlay" summary="Assume the shape of an eagle.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <assignval field="livename" value="talons"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Average"/>
      <autotag group="Value" tag="80"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 10]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 12
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 10
hero.child[aSTR].field[aModBonus].value = 0

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSHyena" name="Wild shape: Hyena" description="Hyena\n{b}STR{/b} 14\n{b}DEX{/b} 15\n{b}CON{/b} 15\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 50\n{b}Attacks{/b} bite 1d6\n{b}Other{/b} trip\n" compset="InPlay" summary="Assume the shape of a hyena.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xTrip">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSLeopard" name="Wild shape: Leopard" description="Leopard\n{b}STR{/b} 16\n{b}DEX{/b} 19\n{b}CON{/b} 15\n{b}Natural AC{/b} 1\n{b}Size{/b} medium\n{b}Movement{/b} 40, climb 20\n{b}Attacks{/b} bite 1d6, 2xclaw 1d3\n{b}Other{/b} improved grab, pounce, rake\n" compset="InPlay" summary="Assume the shape of a leopard.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xPounce">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wRake">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Value" tag="2"/>
      <assignval field="wAttBonus" value="5"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 16
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 19
hero.child[aDEX].field[aModBonus].value = 4]]></eval>
    </thing>
  <thing id="pWSMonLiz" name="Wild shape: Lizard, Monitor" description="Lizard, Monitor\n{b}STR{/b} 17\n{b}DEX{/b} 15\n{b}CON{/b} 17\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} 30, swim 30\n{b}Attacks{/b} bite 1d8\n" compset="InPlay" summary="Assume the shape of a monitor lizard.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 17
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSOctpus" name="Wild shape: Octopus" description="Octopus\n{b}STR{/b} 12\n{b}DEX{/b} 17\n{b}CON{/b} 11\n{b}Natural AC{/b} 2\n{b}Size{/b} small\n{b}Movement{/b} 20, swim 30\n{b}Attacks{/b} arms 0, bite 1d3\n{b}Other{/b} improved grab, aquatic\n" compset="InPlay" summary="Assume the shape of a octopus.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wTentacle">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <assignval field="livename" value="arms"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Tentacle"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 11
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 12
hero.child[aSTR].field[aModBonus].value = 1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSPony" name="Wild shape: Pony" description="Pony\n{b}STR{/b} 13\n{b}DEX{/b} 13\n{b}CON{/b} 12\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 40\n{b}Attacks{/b} hoof 1d3\n" compset="InPlay" summary="Assume the shape of a pony.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wHooves">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d3_3"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 12
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 13
hero.child[aSTR].field[aModBonus].value = 1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSWarPony" name="Wild shape: Pony, War" description="Pony, War\n{b}STR{/b} 15\n{b}DEX{/b} 13\n{b}CON{/b} 14\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 40\n{b}Attacks{/b} hoof 1d3\n" compset="InPlay" summary="Assume the shape of a war pony.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wHooves">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 14
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 15
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSSharkM" name="Wild shape: Shark, Medium" description="Shark, Medium\n{b}STR{/b} 13\n{b}DEX{/b} 15\n{b}CON{/b} 13\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} 0, swim 60\n{b}Attacks{/b} bite 1d6\n{b}Other{/b} aquatic\n" compset="InPlay" summary="Assume the shape of a medium shark.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="60"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 13
hero.child[aSTR].field[aModBonus].value = 1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSConstrM" name="Wild shape: Snake, Constrictor, Medium" description="Snake, Constrictor, Medium\n{b}STR{/b} 17\n{b}DEX{/b} 17\n{b}CON{/b} 13\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 20, climb 20, swim 20\n{b}Attacks{/b} bite 1d3\n{b}Other{/b} constrict 1d3, improved grab\n" compset="InPlay" summary="Assume the shape of a medium constrictor snake.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xConstrict">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="1d3_3"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 17
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSViperS" name="Wild shape: Snake, Small Viper" description="Snake, Small Viper\n{b}STR{/b} 6\n{b}DEX{/b} 17\n{b}CON{/b} 11\n{b}Natural AC{/b} 3\n{b}Size{/b} small\n{b}Movement{/b} 20, climb 20 climb, swim 20\n{b}Attacks{/b} bite 1d2\n{b}Other{/b} poison 1d6 CON initial and secondary, save Fort DC 10\n" compset="InPlay" summary="Assume the shape of a small viper.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d2_2"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xPoison">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      <autotag group="User" tag="1d6_5"/>
      <autotag group="User" tag="Sc1d6_5"/>
      <autotag group="User" tag="PriCON"/>
      <autotag group="User" tag="SecCON"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 11
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 6
hero.child[aSTR].field[aModBonus].value = -2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSViperM" name="Wild shape: Snake, Medium Viper" description="Snake, Medium Viper\n{b}STR{/b} 8\n{b}DEX{/b} 17\n{b}CON{/b} 11\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} 20, climb 20, swim 20\n{b}Attacks{/b} bite 1d4\n{b}Other{/b} poison 1d6 CON initial and secondary, save Fort DC 11\n" compset="InPlay" summary="Assume the shape of a medium viper.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xPoison">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      <autotag group="User" tag="1d6_5"/>
      <autotag group="User" tag="Sc1d6_5"/>
      <autotag group="User" tag="PriCON"/>
      <autotag group="User" tag="SecCON"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 11
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 8
hero.child[aSTR].field[aModBonus].value = -1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSSquid" name="Wild shape: Squid" description="Squid\n{b}STR{/b} 14\n{b}DEX{/b} 17\n{b}CON{/b} 11\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} 0, swim 60\n{b}Attacks{/b} arms 0, bite 1d6\n{b}Other{/b} improved grab, aquatic\n" compset="InPlay" summary="Assume the shape of a squid.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wTentacle">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <assignval field="livename" value="arms"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Tentacle"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="60"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 11
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSWolf" name="Wild shape: Wolf" description="Wolf\n{b}STR{/b} 13\n{b}DEX{/b} 15\n{b}CON{/b} 15\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 50\n{b}Attacks{/b} bite 1d6\n{b}Other{/b} trip\n" compset="InPlay" summary="Assume the shape of a wolf.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xTrip">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 13
hero.child[aSTR].field[aModBonus].value = 1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSWolver" name="Wild shape: Wolverine" description="Wolverine\n{b}STR{/b} 14\n{b}DEX{/b} 15\n{b}CON{/b} 19\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 30, burrow 10, climb 10\n{b}Attacks{/b} bite 1d6, 2xclaw 1d4\n{b}Other{/b} rage\n" compset="InPlay" summary="Assume the shape of a wolverine.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBurrow2">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="10"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xWolvRage">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="10"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSApe" name="Wild shape: Ape" description="Ape\n{b}STR{/b} 21\n{b}DEX{/b} 15\n{b}CON{/b} 14\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 30, climb 30\n{b}Attacks{/b} 2xclaws 1d6, bite 1d6\n" compset="InPlay" summary="Assume the shape of an ape.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 14
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 21
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSBrownB" name="Wild shape: Bear, Brown" description="Bear, Brown\n{b}STR{/b} 27\n{b}DEX{/b} 13\n{b}CON{/b} 19\n{b}Natural AC{/b} 5\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} 2xclaw 1d8, bite 2d6\n{b}Other{/b} improved grab\n" compset="InPlay" summary="Assume the shape of a brown bear.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Claw"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 5

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 27
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSPolarB" name="Wild shape: Bear, Polar" description="Bear, Polar\n{b}STR{/b} 27\n{b}DEX{/b} 13\n{b}CON{/b} 19\n{b}Natural AC{/b} 5\n{b}Size{/b} large\n{b}Movement{/b} 40, swim 30\n{b}Attacks{/b} 2xclaw 1d8, bite 2d6\n{b}Other{/b} improved grab\n" compset="InPlay" summary="Assume the shape of a polar bear.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Claw"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 5

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 27
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSBison" name="Wild shape: Bison" description="Bison\n{b}STR{/b} 22\n{b}DEX{/b} 10\n{b}CON{/b} 16\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} gore 1d8\n{b}Other{/b} stampede\n" compset="InPlay" summary="Assume the shape of a bison.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBisonStam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wGore">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 16
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 22
hero.child[aSTR].field[aModBonus].value = 6

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSCamel" name="Wild shape: Camel" description="Camel\n{b}STR{/b} 18\n{b}DEX{/b} 16\n{b}CON{/b} 14\n{b}Natural AC{/b} 1\n{b}Size{/b} large\n{b}Movement{/b} 50\n{b}Attacks{/b} bite 1d4\n" compset="InPlay" summary="Assume the shape of a camel.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 14
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 18
hero.child[aSTR].field[aModBonus].value = 4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 16
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSHorseH" name="Wild shape: Horse, Heavy" description="Horse, Heavy\n{b}STR{/b} 16\n{b}DEX{/b} 13\n{b}CON{/b} 15\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 50\n{b}Attacks{/b} 2xhooves 1d6\n" compset="InPlay" summary="Assume the shape of a heavy horse.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wHooves">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 16
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSHorseL" name="Wild shape: Horse, Light" description="Horse, Light\n{b}STR{/b} 14\n{b}DEX{/b} 13\n{b}CON{/b} 15\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 60\n{b}Attacks{/b} 2xhooves 1d4\n" compset="InPlay" summary="Assume the shape of a light horse.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wHooves">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 60]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSWarhrsH" name="Wild shape: Warhorse, Heavy" description="Warhorse, Heavy\n{b}STR{/b} 18\n{b}DEX{/b} 13\n{b}CON{/b} 17\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 50\n{b}Attacks{/b} 2xhooves 1d6, bite 1d4\n" compset="InPlay" summary="Assume the shape of a heavy warhorse.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <bootstrap thing="wHooves">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 18
hero.child[aSTR].field[aModBonus].value = 4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSWarhrsL" name="Wild shape: Warhorse, Light" description="Warhorse, Light\n{b}STR{/b} 16\n{b}DEX{/b} 13\n{b}CON{/b} 17\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 60\n{b}Attacks{/b} 2xhooves 1d6, bite 1d3\n" compset="InPlay" summary="Assume the shape of a light warhorse.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      </bootstrap>
    <bootstrap thing="wHooves">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 60]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 16
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSLion" name="Wild shape: Lion" description="Lion\n{b}STR{/b} 21\n{b}DEX{/b} 17\n{b}CON{/b} 15\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} 2xclaw 1d4, bite 1d8\n{b}Other{/b} pounce, improved grab, rake 1d4\n" compset="InPlay" summary="Assume the shape of a lion.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xPounce">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wRake">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Value" tag="2"/>
      <assignval field="wAttBonus" value="5"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 21
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSManta" name="Wild shape: Manta Ray" description="Manta Ray\n{b}STR{/b} 15\n{b}DEX{/b} 11\n{b}CON{/b} 10\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 30\n{b}Attacks{/b} ram 1d6\n{b}Other{/b} aquatic\n" compset="InPlay" summary="Assume the shape of a manta ray.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d6_5"/>
      <assignval field="livename" value="ram"/>
      </bootstrap>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 15
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 11
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSMule" name="Wild shape: Mule" description="Mule\n{b}STR{/b} 16\n{b}DEX{/b} 13\n{b}CON{/b} 17\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 30\n{b}Attacks{/b} hoof 1d4\n" compset="InPlay" summary="Assume the shape of a mule.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wHooves">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 16
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSOctoG" name="Wild shape: Octopus, Giant" description="Octopus, Giant\n{b}STR{/b} 20\n{b}DEX{/b} 15\n{b}CON{/b} 13\n{b}Natural AC{/b} 7\n{b}Size{/b} large\n{b}Movement{/b} 20, swim 30\n{b}Attacks{/b} 8xtentacle 1d4, bite 1d8\n{b}Other{/b} improved grab, constrict, aquatic\n" compset="InPlay" summary="Assume the shape of a giant octopus.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wTentacle">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Value" tag="8"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Tentacle"/>
      </bootstrap>
    <bootstrap thing="xConstrict">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="1d4_4"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 20
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSRhino" name="Wild shape: Rhinocerous" description="Rhinocerous\n{b}STR{/b} 26\n{b}DEX{/b} 10\n{b}CON{/b} 21\n{b}Natural AC{/b} 7\n{b}Size{/b} large\n{b}Movement{/b} 30\n{b}Attacks{/b} gore 2d6\n{b}Other{/b} powerful charge\n" compset="InPlay" summary="Assume the shape of a rhinocerous.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xPowerChar">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="4d6_106"/>
      <autotag group="User" tag="DamUltStr"/>
      <autotag group="User" tag="Gore"/>
      </bootstrap>
    <bootstrap thing="xWeaAttach">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wGore">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 5

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 21
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 26
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSSharkL" name="Wild shape: Shark, Large" description="Shark, Large\n{b}STR{/b} 17\n{b}DEX{/b} 15\n{b}CON{/b} 13\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 0, swim 60\n{b}Attacks{/b} bite 1d8\n" compset="InPlay" summary="Assume the shape of a large shark.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="60"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 17
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSViperL" name="Wild shape: Snake, Large Viper" description="Snake, Large Viper\n{b}STR{/b} 10\n{b}DEX{/b} 17\n{b}CON{/b} 11\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 20, climb 20, swim 20\n{b}Attacks{/b} bite 1d4\n{b}Other{/b} poison 1d6 CON initial and secondary, save Fort DC 11\n" compset="InPlay" summary="Assume the shape of a large viper.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xPoison">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      <autotag group="User" tag="1d6_5"/>
      <autotag group="User" tag="Sc1d6_5"/>
      <autotag group="User" tag="PriCON"/>
      <autotag group="User" tag="SecCON"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 11
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 10
hero.child[aSTR].field[aModBonus].value = 0

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSTiger" name="Wild shape: Tiger" description="Tiger\n{b}STR{/b} 23\n{b}DEX{/b} 15\n{b}CON{/b} 17\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} bite 2d6, 2xclaw 1d8\n{b}Other{/b} improved grab, pounce, rake 1d8\n" compset="InPlay" summary="Assume the shape of a tiger.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xPounce">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wRake">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d8_6"/>
      <assignval field="wAttBonus" value="5"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 23
hero.child[aSTR].field[aModBonus].value = 6

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSCat" name="Wild shape: Cat" description="Cat\n{b}STR{/b} 3\n{b}DEX{/b} 15\n{b}CON{/b} 10\n{b}Natural AC{/b} 0\n{b}Size{/b} tiny\n{b}Movement{/b} 30\n{b}Attacks{/b} 2xclaw 1d2, bite 1d3\n" compset="InPlay" summary="Assume the shape of a cat.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d2_2"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 0

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 3
hero.child[aSTR].field[aModBonus].value = -4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSHawk" name="Wild shape: Hawk" description="Hawk\n{b}STR{/b} 6\n{b}DEX{/b} 17\n{b}CON{/b} 10\n{b}Natural AC{/b} 2\n{b}Size{/b} tiny\n{b}Movement{/b} 10, fly 60 average\n{b}Attacks{/b} talons 1d4\n" compset="InPlay" summary="Assume the shape of a hawk.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <assignval field="livename" value="talons"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Average"/>
      <autotag group="Value" tag="60"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 10]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 6
hero.child[aSTR].field[aModBonus].value = -2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSLizard" name="Wild shape: Lizard" description="Lizard\n{b}STR{/b} 3\n{b}DEX{/b} 15\n{b}CON{/b} 10\n{b}Natural AC{/b} 0\n{b}Size{/b} tiny\n{b}Movement{/b} 20, climb 20\n{b}Attacks{/b} bite 1d4\n" compset="InPlay" summary="Assume the shape of a lizard.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 0

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 3
hero.child[aSTR].field[aModBonus].value = -4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSMonkey" name="Wild shape: Monkey" description="Monkey\n{b}STR{/b} 3\n{b}DEX{/b} 15\n{b}CON{/b} 10\n{b}Natural AC{/b} 0\n{b}Size{/b} tiny\n{b}Movement{/b} 30, climb 30\n{b}Attacks{/b} bite 1d3\n" compset="InPlay" summary="Assume the shape of a monkey.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 0

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 3
hero.child[aSTR].field[aModBonus].value = -4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSOwl" name="Wild shape: Owl" description="Owl\n{b}STR{/b} 4\n{b}DEX{/b} 17\n{b}CON{/b} 10\n{b}Natural AC{/b} 2\n{b}Size{/b} tiny\n{b}Movement{/b} 10, fly 40 average\n{b}Attacks{/b} talons 1d4\n" compset="InPlay" summary="Assume the shape of a owl.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <assignval field="livename" value="talons"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Average"/>
      <autotag group="Value" tag="40"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 10]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 4
hero.child[aSTR].field[aModBonus].value = -3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSRat" name="Wild shape: Rat" description="Rat\n{b}STR{/b} 2\n{b}DEX{/b} 15\n{b}CON{/b} 10\n{b}Natural AC{/b} 0\n{b}Size{/b} tiny\n{b}Movement{/b} 15, climb 15, swim 15\n{b}Attacks{/b} bite 1d3\n" compset="InPlay" summary="Assume the shape of a rat.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="15"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="15"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 15]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 0

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 2
hero.child[aSTR].field[aModBonus].value = -4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSRaven" name="Wild shape: Raven" description="Raven\n{b}STR{/b} 1\n{b}DEX{/b} 15\n{b}CON{/b} 10\n{b}Natural AC{/b} 0\n{b}Size{/b} tiny\n{b}Movement{/b} 10, fly 40 average\n{b}Attacks{/b} claws 1d2\n" compset="InPlay" summary="Assume the shape of a raven.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d2_2"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Average"/>
      <autotag group="Value" tag="40"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 10]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 0

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 1
hero.child[aSTR].field[aModBonus].value = -5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSViperT" name="Wild shape: Snake, Tiny Viper" description="Snake, Tiny Viper\n{b}STR{/b} 4\n{b}DEX{/b} 17\n{b}CON{/b} 11\n{b}Natural AC{/b} 2\n{b}Size{/b} tiny\n{b}Movement{/b} 15, climb 15, swim 15\n{b}Attacks{/b} bite 1\n{b}Other{/b} poison 1d6 CON initial and secondary, save Fort DC 10\n" compset="InPlay" summary="Assume the shape of a tiny viper.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="15"/>
      </bootstrap>
    <bootstrap thing="xPoison">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      <autotag group="User" tag="1d6_5"/>
      <autotag group="User" tag="Sc1d6_5"/>
      <autotag group="User" tag="PriCON"/>
      <autotag group="User" tag="SecCON"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="15"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 15]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 11
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 4
hero.child[aSTR].field[aModBonus].value = -3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSWeasel" name="Wild shape: Weasel" description="Weasel\n{b}STR{/b} 3\n{b}DEX{/b} 15\n{b}CON{/b} 10\n{b}Natural AC{/b} 0\n{b}Size{/b} tiny\n{b}Movement{/b} 20, climb 20\n{b}Attacks{/b} bite 1d3\n{b}Other{/b} attach\n" compset="InPlay" summary="Assume the shape of a weasel.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xWeaAttach">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to tiny
herofield[tSize].value = -2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 0

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 3
hero.child[aSTR].field[aModBonus].value = -4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSViolFun" name="Wild shape: Fungus, Violet" description="Fungus, Violet\n{b}STR{/b} 14\n{b}DEX{/b} 8\n{b}CON{/b} 16\n{b}Natural AC{/b} 4\n{b}Size{/b} medium\n{b}Movement{/b} 10\n{b}Attacks{/b} 4xtentacles 1d6\n{b}Other{/b} Injury, Fortitude DC 14, initial and secondary damage 1d4 Str and 1d4 Con. The save DC is Constitution-based. \n" compset="InPlay" summary="Assume the shape of a violet fungus.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xPoison">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Tentacle"/>
      <autotag group="User" tag="PriSTR"/>
      <autotag group="User" tag="PriCON"/>
      <autotag group="User" tag="SecSTR"/>
      <autotag group="User" tag="SecCON"/>
      <autotag group="User" tag="1d4_4"/>
      <autotag group="User" tag="Sc1d4_4"/>
      </bootstrap>
    <bootstrap thing="wTentacle">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Value" tag="8"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 10]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 16
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 8
hero.child[aDEX].field[aModBonus].value = -1]]></eval>
    </thing>
  <thing id="pWSShriekr" name="Wild shape: Fungus, Shrieker" description="Fungus, Shrieker\n{b}STR{/b} 0\n{b}DEX{/b} 0\n{b}CON{/b} 13\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} 0\n{b}Attacks{/b} none\n{b}Other{/b} shriek\n" compset="InPlay" summary="Assume the shape of a shrieker fungus.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xShriek">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 0
hero.child[aSTR].field[aModBonus].value = -5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 0
hero.child[aDEX].field[aModBonus].value = -5]]></eval>
    </thing>
  <thing id="pWSPhaFun" name="Wild shape: Phantom Fungus" description="Phantom Fungus\n{b}STR{/b} 14\n{b}DEX{/b} 10\n{b}CON{/b} 16\n{b}Natural AC{/b} 4\n{b}Size{/b} medium\n{b}Movement{/b} 20\n{b}Attacks{/b} bite 1d6\n" compset="InPlay" summary="Assume the shape of a phantom fungus.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 16
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSAssaVin" name="Wild shape: Assassin Vine" description="Assassin Vine\n{b}STR{/b} 20\n{b}DEX{/b} 10\n{b}CON{/b} 16\n{b}Natural AC{/b} 6\n{b}Size{/b} large\n{b}Movement{/b} 5\n{b}Attacks{/b} slam 1d6\n{b}Other{/b} constrict, entangle, improved grab\n" compset="InPlay" summary="Assume the shape of an assassin vine.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Slam"/>
      </bootstrap>
    <bootstrap thing="xConstrict">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="1d6_5"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 5]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 16
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 20
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSShamblM" name="Wild shape: Shambling Mound" description="Shambling Mound\n{b}STR{/b} 21\n{b}DEX{/b} 10\n{b}CON{/b} 17\n{b}Natural AC{/b} 11\n{b}Size{/b} large\n{b}Movement{/b} 20, swim 20\n{b}Attacks{/b} 2xslam 2d6\n{b}Other{/b} improved grab, constrict\n" compset="InPlay" summary="Assume the shape of a shambling mound.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Slam"/>
      </bootstrap>
    <bootstrap thing="xConstrict">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="2d6_104"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 11

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 21
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSCrocG" name="Wild shape: Crocodile, Giant" description="Crocodile, Giant\n{b}STR{/b} 27\n{b}DEX{/b} 12\n{b}CON{/b} 19\n{b}Natural AC{/b} 7\n{b}Size{/b} huge\n{b}Movement{/b} 20, swim 30\n{b}Attacks{/b} bite 2d8 or tail slap 1d12\n{b}Other{/b} improved grab\n" compset="InPlay" summary="Assume the shape of a giant crocodile.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d12_404"/>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      <assignval field="livename" value="tail slap"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 27
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 12
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSEleph" name="Wild shape: Elephant" description="Elephant\n{b}STR{/b} 30\n{b}DEX{/b} 10\n{b}CON{/b} 21\n{b}Natural AC{/b} 7\n{b}Size{/b} huge\n{b}Movement{/b} 40\n{b}Attacks{/b} Slam 2d6 and 2 stamps 2d6; or gore 2d8\n{b}Other{/b} trample\n" compset="InPlay" summary="Assume the shape of an elephant.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wStamp">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wGore">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xTrample">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="2d8_305"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 5

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 21
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 30
hero.child[aSTR].field[aModBonus].value = 10

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSSharkH" name="Wild shape: Shark, Huge" description="Shark, Huge\n{b}STR{/b} 21\n{b}DEX{/b} 15\n{b}CON{/b} 15\n{b}Natural AC{/b} 5\n{b}Size{/b} huge\n{b}Movement{/b} 0, swim 60\n{b}Attacks{/b} bite 2d6\n{b}Other{/b} aquatic\n" compset="InPlay" summary="Assume the shape of a huge shark.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="60"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 15
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 5

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 21
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSConstrG" name="Wild shape: Snake, Constrictor, Giant" description="Snake, Constrictor, Giant\n{b}STR{/b} 25\n{b}DEX{/b} 17\n{b}CON{/b} 13\n{b}Natural AC{/b} 4\n{b}Size{/b} huge\n{b}Movement{/b} 20, climb 20, swim 20\n{b}Attacks{/b} bite 1d8\n{b}Other{/b} constrict, improved grab\n" compset="InPlay" summary="Assume the shape of a giant constrictor snake.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xConstrict">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="1d8_6"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 25
hero.child[aSTR].field[aModBonus].value = 7

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSViperH" name="Wild shape: Snake, Huge Viper" description="Snake, Huge Viper\n{b}STR{/b} 16\n{b}DEX{/b} 15\n{b}CON{/b} 13\n{b}Natural AC{/b} 5\n{b}Size{/b} huge\n{b}Movement{/b} 20, climb 20, swim 20\n{b}Attacks{/b} bite 1d6\n{b}Other{/b} poison 1d6 CON initial and secondary, save Fort DC 14\n" compset="InPlay" summary="Assume the shape of a huge viper.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xPoison">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      <autotag group="User" tag="1d6_5"/>
      <autotag group="User" tag="Sc1d6_5"/>
      <autotag group="User" tag="PriCON"/>
      <autotag group="User" tag="SecCON"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 5

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 16
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSSquidG" name="Wild shape: Squid, Giant" description="Squid, Giant\n{b}STR{/b} 26\n{b}DEX{/b} 17\n{b}CON{/b} 13\n{b}Natural AC{/b} 6\n{b}Size{/b} huge\n{b}Movement{/b} 0, swim 80\n{b}Attacks{/b} 10xtentacles 1d6, bite 2d8\n{b}Other{/b} constrict, improved grab\n" compset="InPlay" summary="Assume the shape of a giant squid.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="2d8_204"/>
      </bootstrap>
    <bootstrap thing="wTentacle">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Tentacle"/>
      </bootstrap>
    <bootstrap thing="xConstrict">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="2d8_204"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="80"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 26
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSOrca" name="Wild shape: Orca" description="Orca\n{b}STR{/b} 27\n{b}DEX{/b} 15\n{b}CON{/b} 21\n{b}Natural AC{/b} 6\n{b}Size{/b} huge\n{b}Movement{/b} 0, swim 50\n{b}Attacks{/b} bite 2d6\n{b}Other{/b} aquatic\n" compset="InPlay" summary="Assume the shape of an orca whale.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="50"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 5

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 21
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 27
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSTendri" name="Wild shape: Tendriculos" description="Tendriculos\n{b}STR{/b} 28\n{b}DEX{/b} 9\n{b}CON{/b} 22\n{b}Natural AC{/b} 9\n{b}Size{/b} huge\n{b}Movement{/b} 20\n{b}Attacks{/b} bite 2d8, 2xtendrils 1d6\n{b}Other{/b} improved grab, paralysis, swallow whole\n" compset="InPlay" summary="Assume the shape of a tendriculos.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wTentacle">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Value" tag="8"/>
      <assignval field="livename" value="Tendril x2"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Tentacle"/>
      </bootstrap>
    <bootstrap thing="xSwallow">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xParalyze">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="3d6_8"/>
      <autotag group="User" tag="DurRd"/>
      <autotag group="AbilType" tag="Extra"/>
      <assignval field="livename" value="Paralysis Swallow"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="Render" index="3"><![CDATA[
hero.childfound[xSwallow].field[CustDesc].text = "A tendriculos can try to swallow a grabbed opponent by making a successful grapple check. Swallowed foes take 2d6 points of acid damage per round and may be paralyzed. A swallowed creature that avoids paralysis can climb out of the mass with a successful grapple check. This returns it to the plant&#146;s maw, where another successful grapple check is needed to get free. A swallowed creature can also cut its way out by using a light slashing or piercing weapon to deal 25 points of damage to the tendriculos&#146;s interior (AC 14). Once the creature exits, the plant&#146;s regenerative capacity closes the hole; another swallowed opponent must cut its own way out.{br}{br}A Huge tendriculos&#146;s interior can hold 2 Large, 8 Medium, 32 Small, 128 Tiny, or 512 Diminutive or smaller opponents."

hero.childfound[xParalyze].field[CustDesc].text = "Once swallowed and inside the plant&#146;s mass, the opponent must succeed on a DC 20 Fortitude save or be paralyzed for 3d6 rounds by the tendriculos&#146;s digestive juices. A new save is required each round inside the plant. The save DC is Constitution-based."

hero.childfound[xImpGrab].field[CustDesc].text = "To use this ability, a tendriculos must hit a creature at least one size smaller than itself with its bite attack. It can then attempt to start a grapple as a free action without provoking an attack of opportunity. If it wins the grapple check, it establishes a hold and can try to swallow the opponent in the following round.{br}{br}A tendriculos can also use its improved grab ability on a tendril attack. If it wins the grapple check, it establishes a hold, picks up the opponent, and transfers it to the mouth as a free action, automatically dealing bite damage."]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 6

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 22
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 9

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 28
hero.child[aSTR].field[aModBonus].value = 9

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 9
hero.child[aDEX].field[aModBonus].value = -1]]></eval>
    </thing>
  <thing id="pWSTreant" name="Wild shape: Treant" description="Treant\n{b}STR{/b} 29\n{b}DEX{/b} 8\n{b}CON{/b} 21\n{b}Natural AC{/b} 13\n{b}Size{/b} huge\n{b}Movement{/b} 30\n{b}Attacks{/b} 2xslam 2d6\n{b}Other{/b} trample, double damage vs objects\n" compset="InPlay" summary="Assume the shape of a treant.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xTrample">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="2d6_104"/>
      <autotag group="User" tag="DamHighStr"/>
      </bootstrap>
    <bootstrap thing="xTreDblDaO">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 5

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 21
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 13

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 29
hero.child[aSTR].field[aModBonus].value = 9

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 8
hero.child[aDEX].field[aModBonus].value = -1]]></eval>
    </thing>
  <thing id="pWSBelker" name="Wild shape: Belker" description="Belker\n{b}STR{/b} 14\n{b}DEX{/b} 21\n{b}CON{/b} 13\n{b}Natural AC{/b} 8\n{b}Size{/b} large\n{b}Movement{/b} 30, fly 50 perfect\n{b}Attacks{/b} 2xwing 1d6, bite 1d4, 2xclaws 1d3" compset="InPlay" summary="Assume the shape of a belker.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <bootstrap thing="wWing">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Value" tag="2"/>
      <assignval field="livename" value="Wing x2"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Perfect"/>
      <autotag group="Value" tag="50"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 8

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 21
hero.child[aDEX].field[aModBonus].value = 5]]></eval>
    </thing>
  <thing id="pWSInvSta" name="Wild shape: Invisible Stalker" description="Invisible Stalker\n{b}STR{/b} 18\n{b}DEX{/b} 19\n{b}CON{/b} 14\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 30, fly 30 perfect\n{b}Attacks{/b} 2xslam 2d6\n" compset="InPlay" summary="Assume the shape of an invisible stalker.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Perfect"/>
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 14
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 18
hero.child[aSTR].field[aModBonus].value = 4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 19
hero.child[aDEX].field[aModBonus].value = 4]]></eval>
    </thing>
  <thing id="pWSMagmin" name="Wild shape: Magmin" description="Magmin\n{b}STR{/b} 15\n{b}DEX{/b} 11\n{b}CON{/b} 13\n{b}Natural AC{/b} 6\n{b}Size{/b} small\n{b}Movement{/b} 30\n{b}Attacks{/b} burning touch 1d8, or slam 1d3\n{b}Other{/b} combustion, fiery aura\n" compset="InPlay" summary="Assume the shape of a magmin.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wTch">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d10_304"/>
      <assignval field="livename" value="Burning Touch"/>
      </bootstrap>
    <bootstrap thing="xFireAura">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xCombust">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d3_3"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 15
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 11
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSThoqqua" name="Wild shape: Thoqqua" description="Thoqqua\n{b}STR{/b} 15\n{b}DEX{/b} 13\n{b}CON{/b} 13\n{b}Natural AC{/b} 7\n{b}Size{/b} medium\n{b}Movement{/b} 30, burrow 20\n{b}Attacks{/b} slam 1d6\n{b}Other{/b} heat, burn\n" compset="InPlay" summary="Assume the shape of a thoqqua.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xBurn2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xHeat4">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xBurrow2">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 15
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSAElemS" name="Wild shape: Air Elemental, Small" description="Air Elemental, Small\n{b}STR{/b} 10\n{b}DEX{/b} 17\n{b}CON{/b} 10\n{b}Natural AC{/b} 3\n{b}Size{/b} small\n{b}Movement{/b} fly 100 perfect\n{b}Attacks{/b} slam 1d4\n{b}Other{/b} air mastery, whirlwind\n" compset="InPlay" summary="Assume the shape of a small air elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xAirMstry2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xAirWhirW2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="SizeMinus1"/>
      <autotag group="User" tag="1d4_4"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Perfect"/>
      <autotag group="Value" tag="100"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 10
hero.child[aSTR].field[aModBonus].value = 0

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSAElemM" name="Wild shape: Air Elemental, Medium" description="Air Elemental, Medium\n{b}STR{/b} 12\n{b}DEX{/b} 21\n{b}CON{/b} 14\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} fly 100 perfect\n{b}Attacks{/b} slam 1d6\n{b}Other{/b} air mastery, whirlwind\n" compset="InPlay" summary="Assume the shape of a medium  air elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xAirMstry2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xAirWhirW2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="SizeMinus1"/>
      <autotag group="User" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Perfect"/>
      <autotag group="Value" tag="100"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 14
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 12
hero.child[aSTR].field[aModBonus].value = 1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 21
hero.child[aDEX].field[aModBonus].value = 5]]></eval>
    </thing>
  <thing id="pWSAElemL" name="Wild shape: Air Elemental, Large" description="Air Elemental, Large\n{b}STR{/b} 14\n{b}DEX{/b} 25\n{b}CON{/b} 16\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} fly 100 perfect\n{b}Attacks{/b} slam 2d6\n{b}Other{/b} air mastery, whirlwind\n" compset="InPlay" summary="Assume the shape of a large air elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xAirMstry2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xAirWhirW2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="SizeMinus1"/>
      <autotag group="User" tag="2d6_104"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="Value" tag="2"/>
      <autotag group="wMain" tag="2d6_104"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Perfect"/>
      <autotag group="Value" tag="100"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 16
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 25
hero.child[aDEX].field[aModBonus].value = 7]]></eval>
    </thing>
  <thing id="pWSEElemS" name="Wild shape: Earth Elemental, Small" description="Earth Elemental, Small\n{b}STR{/b} 17\n{b}DEX{/b} 8\n{b}CON{/b} 13\n{b}Natural AC{/b} 7\n{b}Size{/b} small\n{b}Movement{/b} 20\n{b}Attacks{/b} slam 1d6\n{b}Other{/b} earth mastery, push\n" compset="InPlay" summary="Assume the shape of a small earth elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xEarMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="xEarPush">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 17
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 8
hero.child[aDEX].field[aModBonus].value = -1]]></eval>
    </thing>
  <thing id="pWSEElemM" name="Wild shape: Earth Elemental, Medium" description="Earth Elemental, Medium\n{b}STR{/b} 21\n{b}DEX{/b} 8\n{b}CON{/b} 17\n{b}Natural AC{/b} 9\n{b}Size{/b} medium\n{b}Movement{/b} 20\n{b}Attacks{/b} slam 1d8\n{b}Other{/b} earth mastery, push\n" compset="InPlay" summary="Assume the shape of a medium earth elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xEarMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="xEarPush">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 9

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 21
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 8
hero.child[aDEX].field[aModBonus].value = -1]]></eval>
    </thing>
  <thing id="pWSEElemL" name="Wild shape: Earth Elemental, Large" description="Earth Elemental, Large\n{b}STR{/b} 25\n{b}DEX{/b} 8\n{b}CON{/b} 19\n{b}Natural AC{/b} 10\n{b}Size{/b} large\n{b}Movement{/b} 20\n{b}Attacks{/b} 2xslam 2d8\n{b}Other{/b} earth mastery, push\n" compset="InPlay" summary="Assume the shape of a large earth elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xEarMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="xEarPush">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 10

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 25
hero.child[aSTR].field[aModBonus].value = 7

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 8
hero.child[aDEX].field[aModBonus].value = -1]]></eval>
    </thing>
  <thing id="pWSFElemS" name="Wild shape: Fire Elemental, Small" description="Fire Elemental, Small\n{b}STR{/b} 10\n{b}DEX{/b} 13\n{b}CON{/b} 10\n{b}Natural AC{/b} 3\n{b}Size{/b} small\n{b}Movement{/b} 50\n{b}Attacks{/b} slam 1d4\n{b}Other{/b} burn\n" compset="InPlay" summary="Assume the shape of a small fire elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBurn2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 10
hero.child[aSTR].field[aModBonus].value = 0

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSFElemM" name="Wild shape: Fire Elemental, Medium" description="Fire Elemental, Medium\n{b}STR{/b} 12\n{b}DEX{/b} 17\n{b}CON{/b} 14\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} 50\n{b}Attacks{/b} slam 1d6\n{b}Other{/b} burn\n" compset="InPlay" summary="Assume the shape of a medium fire elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBurn2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 14
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 12
hero.child[aSTR].field[aModBonus].value = 1

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSFElem" name="Wild shape: Fire Elemental, Large" description="Fire Elemental, Large\n{b}STR{/b} 14\n{b}DEX{/b} 21\n{b}CON{/b} 16\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 50\n{b}Attacks{/b} slam 2d6\n{b}Other{/b} burn\n" compset="InPlay" summary="Assume the shape of a large fire elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBurn2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 16
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 21
hero.child[aDEX].field[aModBonus].value = 5]]></eval>
    </thing>
  <thing id="pWSWElemS" name="Wild shape: Water Elemental, Small" description="Water Elemental, Small\n{b}STR{/b} 14\n{b}DEX{/b} 10\n{b}CON{/b} 13\n{b}Natural AC{/b} 6\n{b}Size{/b} small\n{b}Movement{/b} 20, swim 90\n{b}Attacks{/b} slam 1d6\n{b}Other{/b} water mastery, drench, vortex\n" compset="InPlay" summary="Assume the shape of a small water elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xWatMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatDrench">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatVortex">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="90"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 13
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSWElemM" name="Wild shape: Water Elemental, Medium" description="Water Elemental, Medium\n{b}STR{/b} 16\n{b}DEX{/b} 12\n{b}CON{/b} 17\n{b}Natural AC{/b} 8\n{b}Size{/b} medium\n{b}Movement{/b} 20, swim 90\n{b}Attacks{/b} slam 1d8\n{b}Other{/b} water mastery, drench, vortex\n" compset="InPlay" summary="Assume the shape of a medium water elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xWatMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatDrench">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatVortex">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="90"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 8

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 16
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 12
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSWElemL" name="Wild shape: Water Elemental, Large" description="Water Elemental, Large\n{b}STR{/b} 20\n{b}DEX{/b} 14\n{b}CON{/b} 19\n{b}Natural AC{/b} 9\n{b}Size{/b} large\n{b}Movement{/b} 20, swim 90\n{b}Attacks{/b} slam 2d8\n{b}Other{/b} water mastery, drench, vortex\n" compset="InPlay" summary="Assume the shape of a large water elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="xWatMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatDrench">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatVortex">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="90"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 9

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 20
hero.child[aSTR].field[aModBonus].value = 5

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 14
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSEElemH" name="Wild shape: Earth Elemental, Huge" description="Earth Elemental, Huge\n{b}STR{/b} 29\n{b}DEX{/b} 8\n{b}CON{/b} 21\n{b}Natural AC{/b} 11\n{b}Size{/b} huge\n{b}Movement{/b} 30\n{b}Attacks{/b} 2xslam 2d10\n{b}Other{/b} earth mastery, push\n" compset="InPlay" summary="Assume the shape of a huge earth elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xEarMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="xEarPush">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmEarElSm"/>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d10_205"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 5

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 21
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 11

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 29
hero.child[aSTR].field[aModBonus].value = 9

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 8
hero.child[aDEX].field[aModBonus].value = -1]]></eval>
    </thing>
  <thing id="pWSFElemH" name="Wild shape: Fire Elemental, Huge" description="Fire Elemental, Huge\n{b}STR{/b} 18\n{b}DEX{/b} 25\n{b}CON{/b} 18\n{b}Natural AC{/b} 4\n{b}Size{/b} huge\n{b}Movement{/b} 60\n{b}Attacks{/b} slam 2d8\n{b}Other{/b} burn\n" compset="InPlay" summary="Assume the shape of a huge fire elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBurn2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 60]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 18
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 18
hero.child[aSTR].field[aModBonus].value = 4

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 25
hero.child[aDEX].field[aModBonus].value = 7]]></eval>
    </thing>
  <thing id="pWSWElemH" name="Wild shape: Water Elemental, Huge" description="Water Elemental, Huge\n{b}STR{/b} 24\n{b}DEX{/b} 18\n{b}CON{/b} 21\n{b}Natural AC{/b} 9\n{b}Size{/b} huge\n{b}Movement{/b} 30, swim 120\n{b}Attacks{/b} slam 2d10\n{b}Other{/b} water mastery, drench, vortex\n" compset="InPlay" summary="Assume the shape of a huge water elemental.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wSlam">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d10_205"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="xWatMstry">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatDrench">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xWatVortex">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="SpecSource" tag="rmWatElSm"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="120"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 5

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 21
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 9

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 24
hero.child[aSTR].field[aModBonus].value = 7

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 18
hero.child[aDEX].field[aModBonus].value = 4]]></eval>
    </thing>
  <thing id="pWSDBadg" name="Wild shape: Badger, Dire" description="Badger, Dire\n{b}STR{/b} 14\n{b}DEX{/b} 17\n{b}CON{/b} 19\n{b}Natural AC{/b} 3\n{b}Size{/b} medium\n{b}Movement{/b} 30, burrow 10\n{b}Attacks{/b} 2x claw 1d4, bite 1d6\n{b}Other{/b} rage\n" compset="InPlay" summary="Assume the shape of a dire badger.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="xWolvRage">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xBurrow2">
      <containerreq phase="First" priority="99"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="10"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSDRat" name="Wild shape: Rat, Dire" description="Rat, Dire\n{b}STR{/b} 10\n{b}DEX{/b} 17\n{b}CON{/b} 12\n{b}Natural AC{/b} 1\n{b}Size{/b} small\n{b}Movement{/b} 40, climb 20\n{b}Attacks{/b} bite 1d4\n{b}Other{/b} disease\n" compset="InPlay" summary="Assume the shape of a dire rat.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d4_4"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xDiRatDis">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="20"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to small
herofield[tSize].value = -1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 1

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 12
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 1

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 10
hero.child[aSTR].field[aModBonus].value = 0

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSDWeas" name="Wild shape: Weasel, Dire" description="Weasel, Dire\n{b}STR{/b} 14\n{b}DEX{/b} 19\n{b}CON{/b} 10\n{b}Natural AC{/b} 2\n{b}Size{/b} medium\n{b}Movement{/b} 40\n{b}Attacks{/b} bite 1d6\n{b}Other{/b} attach, blood drain\n" compset="InPlay" summary="Assume the shape of a dire weasel.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xWeaAttach">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xDiWeBlood">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to medium
herofield[tSize].value = 0

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 0

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 10
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 2

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 14
hero.child[aSTR].field[aModBonus].value = 2

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 19
hero.child[aDEX].field[aModBonus].value = 4]]></eval>
    </thing>
  <thing id="pWSDApe" name="Wild shape: Ape, Dire" description="Ape, Dire\n{b}STR{/b} 22\n{b}DEX{/b} 15\n{b}CON{/b} 14\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 30, climb 15\n{b}Attacks{/b} 2x claw 1d6, bite 1d8\n{b}Other{/b} rend\n" compset="InPlay" summary="Assume the shape of a dire ape.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      </bootstrap>
    <bootstrap thing="xRend">
      <autotag group="User" tag="Claw"/>
      <autotag group="User" tag="DamHighStr"/>
      <autotag group="User" tag="2d6_104"/>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="15"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 2

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 14
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 22
hero.child[aSTR].field[aModBonus].value = 6

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSDBat" name="Wild shape: Bat, Dire" description="Bat, Dire\n{b}STR{/b} 17\n{b}DEX{/b} 22\n{b}CON{/b} 17\n{b}Natural AC{/b} 5\n{b}Size{/b} large\n{b}Movement{/b} 20, fly 40\n{b}Attacks{/b} bite 1d8\n" compset="InPlay" summary="Assume the shape of a dire bat.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xFly2">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Maneuver" tag="Average"/>
      <autotag group="Value" tag="40"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 20]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 5

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 17
hero.child[aSTR].field[aModBonus].value = 3

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 22
hero.child[aDEX].field[aModBonus].value = 6]]></eval>
    </thing>
  <thing id="pWSDBoar" name="Wild shape: Boar, Dire" description="Boar, Dire\n{b}STR{/b} 27\n{b}DEX{/b} 10\n{b}CON{/b} 17\n{b}Natural AC{/b} 6\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} gore 1d8\n{b}Other{/b} ferocity\n" compset="InPlay" summary="Assume the shape of a dire boar.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xBoarFeroc">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wGore">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 27
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 10
hero.child[aDEX].field[aModBonus].value = 0]]></eval>
    </thing>
  <thing id="pWSDLion" name="Wild shape: Lion, Dire" description="Lion, Dire\n{b}STR{/b} 25\n{b}DEX{/b} 15\n{b}CON{/b} 17\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} 2x claw 1d6, bite 1d8\n{b}Other{/b} improved grab, pounce, rake\n" compset="InPlay" summary="Assume the shape of a dire lion.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xPounce">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wRake">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Value" tag="2"/>
      <assignval field="wAttBonus" value="5"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 25
hero.child[aSTR].field[aModBonus].value = 7

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSDWolf" name="Wild shape: Wolf, Dire" description="Wolf, Dire\n{b}STR{/b} 25\n{b}DEX{/b} 15\n{b}CON{/b} 17\n{b}Natural AC{/b} 3\n{b}Size{/b} large\n{b}Movement{/b} 50\n{b}Attacks{/b} bite 1d8\n{b}Other{/b} trip\n" compset="InPlay" summary="Assume the shape of a dire wolf.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="xTrip">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 50]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 3

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 25
hero.child[aSTR].field[aModBonus].value = 7

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSDWolv" name="Wild shape: Wolverine, Dire" description="Wolverine, Dire\n{b}STR{/b} 22\n{b}DEX{/b} 17\n{b}CON{/b} 19\n{b}Natural AC{/b} 4\n{b}Size{/b} large\n{b}Movement{/b} 30, climb 10\n{b}Attacks{/b} 2x claw 1d6, bite 1d8\n{b}Other{/b} rage\n" compset="InPlay" summary="Assume the shape of a dire wolverine.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d6_5"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="1d8_6"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xWolvRage">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="xClimb">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="10"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 30]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 4

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 22
hero.child[aSTR].field[aModBonus].value = 6

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 17
hero.child[aDEX].field[aModBonus].value = 3]]></eval>
    </thing>
  <thing id="pWSDBear" name="Wild shape: Bear, Dire" description="Bear, Dire\n{b}STR{/b} 31\n{b}DEX{/b} 13\n{b}CON{/b} 19\n{b}Natural AC{/b} 7\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} 2x claw 2d4, bite 2d8\n{b}Other{/b} improved grab\n{b}NOTE{/b}: Because this creature has 12 hit dice, you do not gain access to this form until Druid level 12.\n" compset="InPlay" summary="Assume the shape of a dire bear.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Claw"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d4_6"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 4

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 19
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 31
hero.child[aSTR].field[aModBonus].value = 10

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 13
hero.child[aDEX].field[aModBonus].value = 1]]></eval>
    </thing>
  <thing id="pWSDTigr" name="Wild shape: Tiger, Dire" description="Tiger, Dire\n{b}STR{/b} 27\n{b}DEX{/b} 15\n{b}CON{/b} 17\n{b}Natural AC{/b} 6\n{b}Size{/b} large\n{b}Movement{/b} 40\n{b}Attacks{/b} 2x claw 2d4, bite 2d6\n{b}Other{/b} improved grab, pounce, rake\n{b}NOTE{/b}: Because this creature has 16 hit dice, you do not gain access to this form until Druid level 16.\n" compset="InPlay" summary="Assume the shape of a dire tiger.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d6_104"/>
      </bootstrap>
    <bootstrap thing="xImpGrab">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="User" tag="Bite"/>
      </bootstrap>
    <bootstrap thing="xPounce">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wRake">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMain" tag="2d4_6"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d4_6"/>
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to large
herofield[tSize].value = 1

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 40]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 6

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 27
hero.child[aSTR].field[aModBonus].value = 8

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  <thing id="pWSDShar" name="Wild shape: Shark, Dire" description="Shark, Dire\n{b}STR{/b} 23\n{b}DEX{/b} 15\n{b}CON{/b} 17\n{b}Natural AC{/b} 7\n{b}Size{/b} huge\n{b}Movement{/b} 60\n{b}Attacks{/b} bite 2d8\n{b}Other{/b} improved grab, swallow whole\n{b}NOTE{/b}: Because this creature has 18 hit dice, you do not gain access to this form until Druid level 18.\n" compset="InPlay" summary="Assume the shape of a dire shark.">
    <usesource source="WSAdjust"/>
    <bootstrap thing="rAquatic">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <bootstrap thing="wBite">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Helper" tag="NatPrimary"/>
      <autotag group="wMain" tag="2d8_204"/>
      <autotag group="Helper" tag="NatTwoHand"/>
      </bootstrap>
    <bootstrap thing="xSwim">
      <containerreq phase="First" priority="10000"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="Value" tag="60"/>
      </bootstrap>
    <eval phase="First" priority="20000" index="2"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Set the hero's size to huge
herofield[tSize].value = 2

~ Speed adjustment
hero.child[Speed].field[tSpeed].value = 0]]></eval>
    <eval phase="PostAttr"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

~ Note the new CON modifier
var newConMod as number
newConMod = 3

~ Get the original CON modifier
var origConMod as number
origConMod = hero.child[aCON].field[aModBonus].value

~ Set the constitution
hero.child[aCON].field[aFinalVal].value = 17
hero.child[aCON].field[aModBonus].value = newConMod

~ Get the difference between the original CON modifier and the new one
var conSkew as number
conSkew = origConMod - newConMod

~ Get the total hit dice of the hero
var heroHD as number
heroHD = hero.child[Totals].field[tHitDice].value

~ Adjust the hero's hit points to retain the original
~ pre-modification total.
hero.child[Totals].field[tHP].value += conSkew * heroHD


~ Set our natural armor class
hero.child[ArmorClass].field[tACNatural].value = 7

~ Set the strength
hero.child[aSTR].field[aFinalVal].value = 23
hero.child[aSTR].field[aModBonus].value = 6

~ Set the dexterity
hero.child[aDEX].field[aFinalVal].value = 15
hero.child[aDEX].field[aModBonus].value = 2]]></eval>
    </thing>
  </document>
